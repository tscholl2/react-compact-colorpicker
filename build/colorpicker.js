// Generated by CoffeeScript 1.9.3

/*
 * AUTHORS:
 *    - Travis Scholl
 *    - Vivek Venkatachalam
 */
var React, percent_to_color;

React = require("react");

percent_to_color = function(x) {
  switch (false) {
    case !(x < 0.2):
      return [255, Math.floor(255 * x / 0.2), 0];
    case !(x < 0.4):
      return [Math.floor(255 * (1 - (x - 0.2) / 0.2)), 255, 0];
    case !(x < 0.6):
      return [0, 255, Math.floor(255 * (x - 0.4) / 0.2)];
    case !(x < 0.8):
      return [0, Math.floor(255 * (1 - (x - 0.6) / 0.2)), 255];
    default:
      return [Math.floor(255 * (x - 0.8) / 0.2), 0, 255];
  }
};

exports.ColorPicker = React.createClass({
  displayName: 'ColorPicker',
  propTypes: {
    onChange: React.PropTypes.func,
    color: React.PropTypes.string,
    style: React.PropTypes.object
  },
  getDefaultProps: function() {
    return {
      color: "#aaa",
      style: {}
    };
  },
  shouldComponentUpdate: function(nextProps, nextState) {
    return nextProps.color !== this.props.color;
  },
  _click: function(e) {
    var b, base, cpt, g, pt, r, ref, ref1;
    pt = React.findDOMNode(this.refs["svg"]).createSVGPoint();
    ref = [e.clientX, e.clientY], pt.x = ref[0], pt.y = ref[1];
    cpt = pt.matrixTransform(React.findDOMNode(this.refs["svg"]).getScreenCTM().inverse());
    ref1 = percent_to_color(cpt.x / 800), r = ref1[0], g = ref1[1], b = ref1[2];
    return typeof (base = this.props).onChange === "function" ? base.onChange("rgb(" + r + "," + g + "," + b + ")") : void 0;
  },
  render: function() {
    return React.createElement("div", {
      "style": this.props.style
    }, React.createElement("svg", {
      "ref": "svg",
      "viewBox": "0 0 800 400",
      "style": {
        cursor: "crosshair"
      },
      "onClick": this._click,
      "onMouseEnter": ((function(_this) {
        return function() {
          return React.findDOMNode(_this.refs.panel).style.fill = "url(#rb)";
        };
      })(this)),
      "onMouseLeave": ((function(_this) {
        return function() {
          return React.findDOMNode(_this.refs.panel).style.fill = "none";
        };
      })(this))
    }, React.createElement("g", null, React.createElement("defs", null, React.createElement("linearGradient", {
      "id": "rb"
    }, React.createElement("stop", {
      "offset": "0%",
      "stopColor": "#ff0000"
    }), React.createElement("stop", {
      "offset": "20%",
      "stopColor": "#ffff00"
    }), React.createElement("stop", {
      "offset": "40%",
      "stopColor": "#00ff00"
    }), React.createElement("stop", {
      "offset": "60%",
      "stopColor": "#00ffff"
    }), React.createElement("stop", {
      "offset": "80%",
      "stopColor": "#0000ff"
    }), React.createElement("stop", {
      "offset": "100%",
      "stopColor": "#ff00ff"
    }))), React.createElement("rect", {
      "fill": this.props.color,
      "width": "800",
      "height": "400"
    }), React.createElement("rect", {
      "ref": "panel",
      "fill": "none",
      "y": "100",
      "width": "800",
      "height": "300"
    })), React.createElement("rect", {
      "fill": "none",
      "stroke": "#000",
      "strokeWidth": "10",
      "width": "800",
      "height": "400"
    })));
  }
});

//# sourceMappingURL=colorpicker.map
